# -*- coding: utf-8 -*-
"""Calories Burnt Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OnE3TiA2_t-JMoyMYEzIGvY0T9sZxyNY

Importing the dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""Data collection and Processing"""

# loading the data from csv file to pandas dataframe
calories=pd.read_csv('/content/calories.csv')

# print the first 5 rows of the dataframe
calories.head()

exercise_data=pd.read_csv('/content/exercise.csv')

exercise_data.head()

"""Combining the two dataframes"""

calories_data=pd.concat([exercise_data,calories['Calories']],axis=1)

calories_data.head()

# checking the number of rows and columns
calories_data.shape

# getting some information about the dataframes
calories_data.info()

# checking for the missing values
calories_data.isnull().sum()

"""Data Analysis"""

# get some statistical values of data
calories_data.describe()

"""Data Visualization"""

sns.set()

# plotting the gender column in count plot
sns.countplot(y=calories_data['Gender'])

# finding the distribution of "Age" column
sns.distplot(calories_data['Age'])
plt.show()

# finding the distribution of "Height" column
sns.distplot(calories_data['Height'])
plt.show()

# finding the distribution of "Weight" column
sns.distplot(calories_data['Weight'])
plt.show()

"""Finding the correlation in the dataset  
-positive correlation  
-negative correlation
"""

correlation = calories_data.drop('Gender', axis=1).corr()

# constructing a heatmap to understand the correlation
plt.figure(figsize=(10,10))
sns.heatmap(correlation,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Blues')

"""Converting the text data to numerical value"""

calories_data.replace({'Gender':{'male':0,'female':1}},inplace=True)

calories_data.head()

"""Separating the features and the target"""

X=calories_data.drop(columns=['User_ID','Calories'],axis=1)
Y=calories_data['Calories']

print(X)

print(Y)

"""Splitting the data into training and the test data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training  
XGBoost Regressor
"""

# loading the model
model=XGBRegressor()

# training the model with X _train
model.fit(X_train,Y_train)

"""Evaluation

Prediction on test data
"""

test_data_prediction=model.predict(X_test)

print(test_data_prediction)

"""Mean Absolute Error"""

mae=metrics.mean_absolute_error(Y_test,test_data_prediction)

print("Mean Absolute Error ",mae)

# build a predictive system

# Building a Predictive system
# Example data with the correct number of features (7): Gender, Age, Height, Weight, Duration, Heart_Rate, Body_Temp
# Replace with your actual input values
input_data = (1, 25, 170.0, 65.0, 30.0, 100.0, 40.0)

# Changing the input data to a numpy array
input_data_as_numpy_array=np.asarray(input_data)

# Reshape the numpy array as we are predicting for one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

prediction=model.predict(input_data_reshaped)
prediction

